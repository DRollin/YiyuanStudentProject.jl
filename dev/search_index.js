var documenterSearchIndex = {"docs":
[{"location":"documentation/macro_scale/#documentation-macro-scale","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"","category":"section"},{"location":"documentation/#Documentation","page":"Documentation overview","title":"Documentation","text":"","category":"section"},{"location":"documentation/","page":"Documentation overview","title":"Documentation overview","text":"Pages = [\n    \"fine_scale.md\",\n    \"upscaling.md\",\n    \"macro_scale.md\",\n]","category":"page"},{"location":"documentation/fine_scale/#documentation-fine-scale","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"","category":"section"},{"location":"documentation/fine_scale/#Strong-From","page":"Chemo-Mechanical Problem - fine scale","title":"Strong From","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Three primary variable fields: displacement vector (u(xt) Omega times mathbbR^+ rightarrow mathbbR^3)  and molar ion concentration (c(xt) Omega times mathbbR^+ rightarrow mathbbR)  as well as the chemical potential gradient (mu(xt) Omega times mathbbR^+ rightarrow mathbbR)  are solved in the lithium structural battery problem.  To solve the problem three equilibrium conditions in mechanics, diffusion and chemical potential are given in Strong Forms as following:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    -sigma cdot nabla = 0  in  Omega times (0T \n\n    dotc + j cdot nabla = 0  in Omega times (0T\n\n    mu - mu^en = 0  in Omega times (0T \nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Where the boundary is divied into three parts for the three variable fields representivly   (Gamma = Gamma_D^(u) cup Gamma_N^(u) = Gamma_D^(mu) cup Gamma_N^(mu) = Gamma_D^(c) cup Gamma_N^(c)):","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    u = u^p\n    \n    on Gamma_D^(u) times (0T\n\n    t = sigma cdot n = t^p\n    \n    on Gamma_N^(u) times (0T\n\n    mu = mu^p\n    \n    on Gamma_D^(mu) times (0T \n\n    h = -j cdot n = h^p\n    \n    on Gamma_N^(mu) times (0T\nendalign","category":"page"},{"location":"documentation/fine_scale/#Constitutive-Models","page":"Chemo-Mechanical Problem - fine scale","title":"Constitutive Models","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Due to the coupling of the mechanical and chemical aspects the total strain has both the contribution due to a deformation state u(x,t) and the ion concentration c(x,t), where an ion intercalation tensor (alpha^ch) is used based on the models of xxxx and xxxxx. ","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nepsilonu = (u otimes nabla)^sym\n\nepsilon^ch(c) = alpha^ch (c-c_ref)\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"The free energy psi is assumed to be the sum of mechanical and chemical parts  psi (epsilon c) = psi^mech(epsilonc) + psi^chem(c).","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    psi^mech = frac12(epsilon-epsilon^ch(c)) colon E colon (epsilon-epsilon^ch(c))\n\n    psi^chem = (c-c_ref)mu_ref + frac12 fracRtheta_refc_m(c-c_ref)^2\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Furthermore, a constant mobility tensor M for the assumption of a linear relation between ion flux and the gradient of  the chemical potential is used using a mobility coefficient eta . In this project a reference temperature theta_ref and the converntration c_ref as well as the reference converntration c_ref are gloable constant material parameters for the purpose of linearization.  So that the simplified constitutive equations are:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    sigma(epsilonc) = fracpartialpsipartialepsilon\n    = E colon (epsilon-epsilon^ch(c))\n\n    mu^en(epsilonc) = fracpartialpsipartialepsilon\n    = mu_ref + fracRtheta_refc_m(c-c_ref) - alpha^ch colon sigma(epsilonc)\n\n    j(nablamu)\n    = -M cdot nablamu\nendalign","category":"page"},{"location":"documentation/fine_scale/#Weak-Format","page":"Chemo-Mechanical Problem - fine scale","title":"Weak Format","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    int_Omega sigma (epsilonuc)  epsilondelta u )  dOmega  =  int_Gamma_N^(u) t^p cdot delta u  dGamma   \n    \n    forall delta u in mathbfU^0\n\n    int_Omega dotc delta mu  dOmega - int_Omega j(nablamu) cdot nabladelta mu  dOmega \n    =  int_Gamma_N^(mu) h^p delta mu dGamma \n    \n    forall delta mu in mathbfM^0\n\n    int_Omega (mu - mu^en(epsilonu c)) delta c  dOmega \n    = 0\n    \n    forall delta mu in mathbfC^0\nendalign","category":"page"},{"location":"reference/#Reference","page":"Reference overview","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference overview","title":"Reference overview","text":"Pages = [\n    \"types.md\",\n    \"fine_scale.md\",\n]","category":"page"},{"location":"reference/fine_scale/","page":"Fine scale","title":"Fine scale","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/fine_scale/#Fine-scale","page":"Fine scale","title":"Fine scale","text":"","category":"section"},{"location":"reference/fine_scale/","page":"Fine scale","title":"Fine scale","text":"generate_rve_grid\nget_volume\nget_phase_bias\nprepare_setup\nadd_bc!\nassemble!\nassemble_element!\ncompute_time_step!\nsolve_time_series\nplot_grid\nanimate_result","category":"page"},{"location":"reference/fine_scale/#YiyuanStudentProject.generate_rve_grid","page":"Fine scale","title":"YiyuanStudentProject.generate_rve_grid","text":"generate_rve_grid(; ϕ::Real, d::Real, meshsize::Real, dx::NTuple{3,Real}=(1.0,1.0,1.0))\ngenerate_rve_grid(spheres::Vector{BubbleBath.Sphere{3}}; meshsize::Real, dx::NTuple{3,Real}=(1.0,1.0,1.0))\n\nReturn a Grid with spherical inclusions for a 3D Representative Volume Element (RVE) in desired meshsize.  Two cell sets are included in the generated grid:\n\n\"particles\":    Cells within the spherical inclusions.\n\"matrix\":       Cells outside the spheres (background material).\n\nVariation 1\n\nThe grid will be generated by given the volume fraction of the spherical inclusions ϕ (0 ≤ ϕ ≤ 1), the average diameter of the spheres d, and the meshsize as well as the RVE size dx  in 3D, which by default is (1.0, 1.0, 1.0).\n\nVariation 2\n\nIn this variation a vector of pre-defined spheres to be embedded in the grid sphere is given instead of  the volume fraction and the average diameter of the sphere. The meshsize and the RVE size dx  are still needed arguments in this case.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.get_volume","page":"Fine scale","title":"YiyuanStudentProject.get_volume","text":"TODO\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.get_phase_bias","page":"Fine scale","title":"YiyuanStudentProject.get_phase_bias","text":"TODO\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.prepare_setup","page":"Fine scale","title":"YiyuanStudentProject.prepare_setup","text":"prepare_setup(rve::RVE{dim}) where {dim}\n\nReturn a RVESetup struct for the elementweise assembly and time stepping. \n\nArguments:\n\n-rve::RVE{dim}: An RVE object containing the following fields:\n\ngrid: \t\tThe grid (mesh) for RVE.\nP: \t\t\tPhase data for \"particles\" in the material.\nM: \t\t\tPhase data for the \"matrix\" in the material.\n\nImplementation Details:\n\nThe interpolation ip is defined by passing the corresponding refshape using the function _get_ref_shape(Val(dim)). \n\nAfter the 'DofHandler' is created based on the grid from the argument rve, unknown fields can be added to it using add! By calling close! to finalize the construction. \n\nCellvallues are created for each discrete fields respectively passing quadrature rule with 3 integration points.\n\nNumber of base function for each unknown fields is defined using getnbasefunctions.\n\nCalling function add_bc! to initialize the boundary conditions and associate this to the dofhandler.\n\nLocal stiffness and mass matrices are initialized. Submatrices for locating the corresponding field interaction in elementweise by calling the macro @view.\n\nA named tuple with the Struct PhaseSetup is then prepared for each P stands for particals and M for matrix.\n\nGloable stiffness, mass, and jacobian matrices is initialized using allocate_matrix for a sparse matrix pattern.\n\ninitialize the gloable residual vector and the solution vectors for both current and next time step.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.add_bc!","page":"Fine scale","title":"YiyuanStudentProject.add_bc!","text":"add_bc!(ch::ConstraintHandler, grid::Grid{3}, load::LoadCase{3})\n\nCreate a periodic boundary condition on u and μ unknown fields respectively on the ∂Ω part of the boundary. ∂Ω is defined by the collection of periodic facets from the grid. \n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.assemble!","page":"Fine scale","title":"YiyuanStudentProject.assemble!","text":"    assemble!(setup::RVESetup)\n\nReturn the assembled mass matrix M and stiffness matrix K.\n\nArguments:\n\nsetup:   A preconfigured object type that defined for RVE assembly. Fields from setup are used in this function:\nphasesetups: A preconfigured object type that defined for elementweise assembly,\nM:           Initialized gloable mass matrix to be assembled,\nK:           Initialized gloable stiffness matrix to be assembled.\n\nImplementation Details:\n\nCreate a CSCAssembler for both K and M.\n\nDo the whole assembly for all the phases:     for all cells update the cell values for all the unknown fields and initialize both Kₑ and Mₑ,     do element assembly,     return assembled Kₑ and Mₑ.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.assemble_element!","page":"Fine scale","title":"YiyuanStudentProject.assemble_element!","text":"    assemble_element!(setup::PhaseSetup)\n\nReturn the assembled mass matrix for coupling between the chemical potantial and the concentration fields.\n\nArguments:\n\nsetup:  a preconfigured object type that defined for elementweise assembly. Fields from setup are used in this function:\ncv:             Cell values for all unknown fields,\nnbf:            The number of basis functions for all unknown fields,\nmaterial:       The predefined material parameters for both phase particals and matrix:\nE:          fourth order stiffness tensor E,\nαᶜʰ:        isotropic ion intercalation tensor,\nk:          concentration-chemical potantial coefficient,\ncʳᵉᶠ:       reference concentration,\nM:          mobility tensor,\nμʳᵉᶠ        reference chemical potantial.             \nKₑ:             The initialized element stiffness matrix to be assembled,\nMₑ:             The initialized element mass matrix to be assembled,\nsubmatrices:    Submatrices of certain coupled unknown fields, including:\nKₑuu:   \t    Coupling matrix between displacement and displacement fields.\nKₑuc:   \t    Coupling matrix between displacement and concentration fields.\nKₑcu:   \t    Coupling matrix between concentration and displacement fields.\nKₑcc:   \t    Coupling matrix between concentration and concentration fields.\nKₑcμ:   \t    Coupling matrix between concentration and chemical potential fields.\nKₑμμ:           Coupling matrix between chemical potential and chemical potential fields.\nMₑμc:   \t    Coupling matrix between chemical potential and concentration fields.\n\nImplementation Details:\n\nFor each quadrature point the element volume is computed. Furthermore for each base function in corresponding field, evaluate the shape function for test function. The nodal value of a certain unknown field is then computed for each base funtion in that field.\n\nThen the coupling submatrices are computed as:\n\nKₑuu = ∫(δNϵi ⊡ E ⊡ Nϵj) * dΩ\n\nKₑuc = ∫-(δNϵi ⊡ E ⊡ (αᶜʰ*(Ncj - cʳᵉᶠ))) * dΩ\n\nKₑcu = ∫(δNci * (αᶜʰ ⊡ E ⊡ Nϵj))* dΩ\n\nKₑcc = ∫-(δNci * (k(Ncj-cʳᵉᶠ) + αᶜʰ ⊡ E ⊡(αᶜʰ(Ncj - cʳᵉᶠ))))* dΩ\n\nKₑcμ = ∫(δNci * (Nμj - μʳᵉᶠ)) * dΩ\n\nKₑμμ = ∫(δN∇μi ⋅ M ⋅ N∇μj) * dΩ\n\nMₑμc = ∫(Ncj * δNμi) * dΩ\n\nwhere:\n\nNxj:     Shape function for x field nodal values\nδNxi:    Shape function for x field test function\nN∇xj:    Gradient of Shape function for x field nodal values\nδN∇xi:   Gradient of Shape function for x field test function\ndΩ:      Determinant of the Jacobian times the quadrature weight (element volume)\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.compute_time_step!","page":"Fine scale","title":"YiyuanStudentProject.compute_time_step!","text":"compute_time_step!(setup::RVESetup{dim}, load::LoadCase{dim}, Δt)\n\nCompute the solution for the next time step in a Representative Volume Element (RVE) simulation using an implicit time integration scheme.\n\nArguments\n\nsetup::RVESetup{dim}:   The setup object containing parameters for the RVE simulation:\ngrid:                 The finite element grid,\ndh:                   The degrees of freedom handler,\nK:                    The gloable stiffness matrix,\nM:                    The gloable mass matrix,\ng:                    The residual vector (force vector),\nJ:                    The Jacobian matrix (system matrix),\naⁿ:                   The solution vector at the current time step,\naⁿ⁺¹:                 The solution vector at the next time step,\nload::LoadCase{dim}:    The load case specifying boundary conditions and external loads for the current time step.\nΔt::Real:               The time step size.\n\nImplementation Details\n\nThis function uses an implicit time integration scheme to compute the solution for the next time step by solving the linear system:\n\nThe function applies boundary conditions to the system matrix and force vector using a constraint handler before solving  for the next time step solutions\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.solve_time_series","page":"Fine scale","title":"YiyuanStudentProject.solve_time_series","text":"solve_time_series(rve::RVE{dim}, load::LoadCase{dim};  Δt=0.25, t_total=1) where {dim}\n\nCompute the results in a named tuple with fields t total time cost and a solution vector contains u displacement, μ chemical potantial,  and c concentration for the whole time series with a certain time step. \n\nArguments\n\nrve:    Object for solving function prepare_setup,\nload:   Object LoadCase with a \n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.plot_grid","page":"Fine scale","title":"YiyuanStudentProject.plot_grid","text":"plot_grid(grid::Grid{3})\n\nRuturn a Makie.Fifure to visualize a 3D finite element grid using the Makie plotting library.\n\nArguments:\n\ngrid::Grid{3}: A 3D grid object representing the finite element mesh to be visualized. \n\nImplementation Details:\n\nA plotable mesh is generated using prepare_plotable_mesh and input grid\n\nSets up a 3D axis (Axis3) with an equal aspect ratio and a title undeformed grid.\n\nRenders the grid as a solid mesh (Makie.mesh!) with a light blue color.\n\nOverlays the grid's edges as a wireframe (Makie.wireframe!) with black edges.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.animate_result","page":"Fine scale","title":"YiyuanStudentProject.animate_result","text":"animate_result(res::NamedTuple, setup::RVESetup{dim}, file_name::String=\"Myresult.mp4\", n::Number)\n\nReturn an animation showing the evolution of the solution for a 3D Representative Volume Element (RVE) simulation.\n\nArguments\n\nres:         A named tuple containing the simulation results\nsetup:       The setup object for the RVE simulation, containing: grid and dh fields\nfile_name:   The path and name of the output animation file (default: \"Myresult.mp4\")\nn:           Scaling factor for displacement\n\nDetails Implementation\n\nA plotable mesh is generated using prepare_plotable_mesh with a cut open to show the inner structure.\n\nA Figure is plotted showing the results of for displacement u, chemical potantial μ, concentrationc at each time step.\n\n\n\n\n\n","category":"function"},{"location":"examples/example_1/","page":"Example 1","title":"Example 1","text":"EditURL = \"../literate-examples/example_1.jl\"","category":"page"},{"location":"examples/example_1/#example-1","page":"Example 1","title":"Example 1","text":"","category":"section"},{"location":"examples/example_1/","page":"Example 1","title":"Example 1","text":"","category":"page"},{"location":"examples/example_1/","page":"Example 1","title":"Example 1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"documentation/upscaling/#documentation-upscaling","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"","category":"section"},{"location":"reference/types/","page":"Types","title":"Types","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"reference/types/","page":"Types","title":"Types","text":"Material\nRVE\nLoadCase\nPhaseSetup\nRVESetup","category":"page"},{"location":"reference/types/#YiyuanStudentProject.Material","page":"Types","title":"YiyuanStudentProject.Material","text":"Material{dim,T}\n\nA Material material type object used for defining the material character with the following parameters:\n\nE:          fourth order stiffness tensor E,\nαᶜʰ:        isotropic ion intercalation tensor,\nk:          concentration-chemical potantial coefficient,\ncʳᵉᶠ:       reference concentration,\nM:          mobility tensor,\nμʳᵉᶠ        reference chemical potantial.\n\nThe type can be created by calling the funtion Material{dim}(; G::T, K::T, η::T, cʳᵉᶠ::T, μʳᵉᶠ::T, θʳᵉᶠ::T, cᵐ::T, α::T, R::T=8.31446261815324) where {dim, T<:Real}\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.RVE","page":"Types","title":"YiyuanStudentProject.RVE","text":"RVE{dim}\n\nAn object called RVE that contains\n\ngrid:       a Grid for the prescribed RVE,\nP:          Material type for partical constraints,\nM:          Material type for matrix.\n\nThe type can be created by calling the funtion RVE(; grid::Grid{dim}, materials::NamedTuple{(:P,:M),Tuple{Material{dim}, Material{dim}}}) where {dim}\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.LoadCase","page":"Types","title":"YiyuanStudentProject.LoadCase","text":"LoadCase{dim}\n\nA LoadCase type object that defined the external forces\n\nε̄:          averaging external strain Tensor,\nμ̄:          averaging chemical potantial on the boundary,\nζ̄          gradient of the averaging chemical potantial on the boundary.\n\nThe struct can be created by calling the funtion `LoadCase(dim::Int; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.PhaseSetup","page":"Types","title":"YiyuanStudentProject.PhaseSetup","text":"PhaseSetup{dim}\n\nA PhaseSetup type object that contains the relevant imformations for the element assembly:\n\ndh:             dofHandler based on the given grid,\ncells:          ordered cell sets,\ncv:             cellvalues in named tuple for each unknown field representivly,\nnbf:            number of base function in named tuple for the unknown fields representivly,\nmaterial:       material struct,\nKₑ:             element stiffness matrix,\nMₑ:             element mass matrix,\nsubmatrices:    submatrices for locating the unknown fields for element matrix assembly.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.RVESetup","page":"Types","title":"YiyuanStudentProject.RVESetup","text":"RVESetup{dim}\n\nA PhaseSetup object that contains the relevant imformations for the problem solving/time stepping:\n\ngrid:           a Grid for the prescribed RVE,\ndh:             dofHandler based on the given grid,\nphasesetups:    struct PhaseSetup in named tuple for each unknown field representivly,\nK:              stiffness matrix\nM:              mass matrix\nJ:              jacobian matrix for time stepping\ng:              residual vector for time stepping\naⁿ:              unknowns in current step\naⁿ⁺¹:           unknowns in next step\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"#Chemo-mechanical-Problem","page":"Home","title":"Chemo-mechanical Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for YiyuanStudentProject.jl ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The aim of this project is to develop and implement a linear transient chemo-mechanical multi-scale model within the FE² framework. To expedite the computation for a substantial number of Representative Volume Element (RVE) problems, the groundwork for employing Numerical Model Reduction (NMR) utilizing snapshot Proper Orthogonal Decomposition (POD) shall be undertaken.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As can be told from the name, a chemo-mechanical problem refers to the situation where chemical reactions and mechanical changing are coupled together. Such problems are common in various fields, including battery science. Thus, a lithium-ion structural battery problem is discussed in this project. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This document provides an exhaustive examination of the mathematical model and comprehensive explanation the code implementation.","category":"page"}]
}
