var documenterSearchIndex = {"docs":
[{"location":"documentation/macro_scale/#documentation-macro-scale","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"","category":"section"},{"location":"documentation/macro_scale/#Weak-Format","page":"Chemo-Mechanical Problem - macro scale","title":"Weak Format","text":"","category":"section"},{"location":"documentation/macro_scale/","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"beginalign\nint_Omega barboldsymbol sigma  boldsymbol varepsilondelta barboldsymbol u  dOmega  =  int_Gamma_N^(u) boldsymbol t^textp cdot delta barboldsymbol u  dGamma\n\nforall delta barboldsymbol u in barmathbbU^0\n\nint_Omega dotbarboldsymbol c  delta barboldsymbol mu  dOmega - int_Omega (barboldsymbol j - dotbarboldsymbol c_2) cdot boldsymbol nabladelta barboldsymbol mu  dOmega\n=  int_Gamma_N^(mu) boldsymbol h^textp delta barboldsymbol mu  dGamma\n\nforall delta barboldsymbol mu in barmathbbM^0\nendalign","category":"page"},{"location":"documentation/macro_scale/","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"with the variationally consistent macro scale homogenized fields:","category":"page"},{"location":"documentation/macro_scale/","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"beginalign\n    barboldsymbol sigma = lang boldsymbol sigma rang _square = lang boldsymbol E colon boldsymbol varepsilonboldsymbol u-boldsymbol alpha^textchboldsymbol c - c_ref rang _square\n\n    barboldsymbol j = lang boldsymbol j rang _square = -lang boldsymbol M cdot boldsymbol zetaboldsymbol mu rang _square\n\n    barboldsymbol c = lang boldsymbol c rang _square\n\n    barboldsymbol c_2 = lang boldsymbol c boldsymbol x - barboldsymbol x rang _square\nendalign","category":"page"},{"location":"documentation/macro_scale/#Time-Stepping","page":"Chemo-Mechanical Problem - macro scale","title":"Time Stepping","text":"","category":"section"},{"location":"documentation/macro_scale/","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"For every time step the RVE problem is going to be solved at the corresponding quadrature point. The four variationally consistent macro scale fields are updated using new RVE results at current time step. New stiffness matrix boldsymbol K^n is then computed with the new variationally consistent macro scale fields. A time dependent boundary condition is applied on both boldsymbol K^n and boldsymbol f^n.","category":"page"},{"location":"documentation/macro_scale/","page":"Chemo-Mechanical Problem - macro scale","title":"Chemo-Mechanical Problem - macro scale","text":"beginalign\nboldsymbol K^n boldsymbol a^textn = boldsymbol f^n\n\nboldsymbol a^n = (boldsymbol K^n)^-1 boldsymbol f^n\n\nendalign","category":"page"},{"location":"documentation/reference/#documentation-references","page":"Chemo-Mechanical Problem - References","title":"Chemo-Mechanical Problem - References","text":"","category":"section"},{"location":"documentation/reference/","page":"Chemo-Mechanical Problem - References","title":"Chemo-Mechanical Problem - References","text":"D. R. Rollin, F. Larsson, K. Runesson and R. Jänicke. Upscaling of chemo-mechanical properties of battery electrode material. International Journal of Solids and Structures 281, 112405 (2023).\n\n\n\n","category":"page"},{"location":"reference/upscaling/","page":"Upscaling","title":"Upscaling","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/upscaling/#Upscaling","page":"Upscaling","title":"Upscaling","text":"","category":"section"},{"location":"reference/upscaling/","page":"Upscaling","title":"Upscaling","text":"compute_effective_response!\naverage_quantities","category":"page"},{"location":"reference/upscaling/#YiyuanStudentProject.compute_effective_response!","page":"Upscaling","title":"YiyuanStudentProject.compute_effective_response!","text":"compute_effective_response!(gpdata::GaussPointData{dim}, rvesetup::RVESetup{dim}, load::LoadCase{dim}, Δt) where {dim}\n\nComputes the effective response of a material at the macroscale using an RVE. This function updates the state variables in the GaussPointData and performs upscaling calculations.\n\nArguments:\n\ngpdata: An mutable object GaussPointData contains the state data,\nrvesetup: An object RVESetup helping for RVE solving,\nload: An object LoadCase as implicit boundary condition for RVE problem,\nΔt: The time increment for the current time step.\n\nImplementation Details:\n\nUpdate the aᵣᵥₑⁿ from gpdata to the aⁿ in rvesetup.\n\nSolve RVE problem at the current time step. Update the RVE solution in gpdata.\n\nComputes upscaled quantities (stress, concentration, flux, etc.) using the average_quantities function.\n\nCalculates the rates of change for concentration (ċ) and position-weighted concentration (ċ₂).\n\nUpdates gpdata with the newly computed averages.\n\n\n\n\n\n","category":"function"},{"location":"reference/upscaling/#YiyuanStudentProject.average_quantities","page":"Upscaling","title":"YiyuanStudentProject.average_quantities","text":"average_quantities(a::Vector{Float64}, setup::RVESetup{dim}) where {dim}\n\nComputes the average quantities σ̄,c̄,c̄₂,j̄for a given solution vectora` over the phase setups of an RVE. \n\nArguments:\n\na:  Initialied or updated solution vector of the corresponding RVE problem,\nsetup: An object RVESetup for solving RVE problem\n\nImplementation Details:\n\nInitialize the average quantities σ̄,c̄,c̄₂,j̄`.\n\nFor all cells update the cell values for all the unknown fields.\n\nFor each quadrature point the element volume is computed. Furthermore for each base function in corresponding field, evaluate the value of c concentration, ε strain, ∇μ the gradient of chemical potantial and x the spatial coordinate of the current quadrature point.\n\nThen the macro scale consistent macro scale fields are computed as following:\n\nσ̄  = ∫ (E ⊡ (ε - αᶜʰ * (c - cʳᵉᶠ))) * dΩ / Vᵣᵥₑ\n\nc̄ = ∫ c * dΩ / Vᵣᵥₑ\n\nc̄₂ = ∫ (c * x) * dΩ / Vᵣᵥₑ\n\nj̄ = - ∫ (M ⋅ ∇μ) * dΩ / Vᵣᵥₑ\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/","page":"Macro scale","title":"Macro scale","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/macro_scale/#Macro-scale","page":"Macro scale","title":"Macro scale","text":"","category":"section"},{"location":"reference/macro_scale/","page":"Macro scale","title":"Macro scale","text":"prepare_macro_setup\nadd_macro_bc!\nassemble_macro_K!\nassemble_macro_element!\nsolve_macro_problem\nanimate_macro_result\n_prepare_plots!\nanimate_combined_result","category":"page"},{"location":"reference/macro_scale/#YiyuanStudentProject.prepare_macro_setup","page":"Macro scale","title":"YiyuanStudentProject.prepare_macro_setup","text":"prepare_macro_setup(grid::Grid{dim}, rvesetup::RVESetup{dim}, Δt) where {dim}\n\nReturn a SolveSetup object for the element-wise assembly and solving the time dependent macro scale problem. \n\nArguments:\n\ngrid:\t\tprescribed macro scale grid with no distinguished phases,\nrvesetup:\tRVESetup,\nΔt:\t\t\tThe time step size.\n\nImplementation Details:\n\nThe interpolation ip is defined by passing the corresponding refshape using the function _get_ref_shape(Val(dim)). \n\nAfter the 'DofHandler' is created based on the grid, unknown fields can be added to it using add! By calling close! to finalize the construction. \n\nCellvallues are created for each discrete fields respectively passing quadrature rule with 3 integration points.\n\nNumber of base function for each unknown fields is defined using getnbasefunctions.\n\nCalling function add_bc! to initialize the boundary conditions and associate this to the Dofhandler.\n\nLocal stiffness and solution vector are initialized. subarrays for locating the corresponding field interaction in element-wise by calling the macro @view.\n\nGlobal stiffness matrix, global right-hand side and global solution vector are initialized. For the stiffness matrix using allocate_matrix for a sparse matrix pattern.\n\nCreate the necessary data storage GaussPointData for each gauss point in macro scale with the initialized solution vector from RVESetup, 0.0 for c concentration and c₂ the gradient of concentration.\n\nA AssemblySetup for elementweise assembly and SolveSetup for the final solving of the time dependent problem are prepared.\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.add_macro_bc!","page":"Macro scale","title":"YiyuanStudentProject.add_macro_bc!","text":"addmacrobc!(ch::ConstraintHandler, grid::Grid{3}, Δt)\n\nAdd a time dependent dirichlet boundary condition for the macro scale unknown fields respectively on the left ∂Ωₗ and right ∂Ωᵣ boundary facet,  which are defined passing function getfacetset. \n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.assemble_macro_K!","page":"Macro scale","title":"YiyuanStudentProject.assemble_macro_K!","text":"    assemble_macro_K!(setup::SolveSetup{dim}, Δt) where {dim}\n\nReturn the whole SolveSetup with assembled stiffness matrix K.\n\nArguments:\n\nsetup:   SolveSetup: A preconfigured object that defined for macro scale problem assembly. Fields from setup are used in this function:\nassemblysetup: AssemblySetup: A preconfigured object type that defined for elementweise assembly,\nK:           Initialized global stiffness matrix to be assembled,\naⁿ:           Initialized global solution vector for calling the element solution vector\n\nImplementation Details:\n\nCreate a CSCAssembler for K.\n\nDo the whole assembly:     for all cells update the cell values for all the unknown fields and fill zeros to the      do element assembly, aliening the element solution vector with the global solution vector.     return assembled Kₑ.\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.assemble_macro_element!","page":"Macro scale","title":"YiyuanStudentProject.assemble_macro_element!","text":"    assemble_macro_element!(setup::AssemblySetup{dim}, Δt, gpdata::Vector{GaussPointData{dim}}) where {dim}\n\nReturn the assembled stiffness matrix.\n\nArguments:\n\nsetup:  a preconfigured object type that defined for elementweise assembly. \n\nImplementation Details:\n\nThe local unknowns μₑ and uₑ are passed for creating the step dependent macro scale variables for each quadrature point.  Object LoadCase is generated using the macro scale variables μ̄, ζ̄and ε̄. For each quadrature point the element volume is generated. The variationally consistent macro-scale (homogenized) fields σ̄, ċ, ċ₂, j̄ are computed passing the upscaling function compute_effective_response. Furthermore for each base function in corresponding field, evaluate the shape function for the test function. \n\nThen the coupling subarrays are computed as:\n\nKₑuu = ∫(δNϵi ⊡ σ̄ ) * dΩ\n\nKₑμμ = ∫(δNμi * ċ - δN∇μi ⋅ (ċ₂ - j̄) ) * dΩ\n\nwhere:\n\nδNxi:    Shape function for x field test function\nδN∇xi:   Gradient of shape function for test function of field x\ndΩ:      Determinant of the Jacobian times the quadrature weight\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.solve_macro_problem","page":"Macro scale","title":"YiyuanStudentProject.solve_macro_problem","text":"solve_macro_problem(grid::Grid{dim}, rvesetup::RVESetup{dim}; Δt=0.1, t_total=1) where {dim}\n\nreturn solution storage and the macro scale setup for result visualizing.  Compute the solution storage in a NamedTuple with fields t total time and a solution vector series contain u displacement and μ chemical potantial for the whole time series with a certain time step width. \n\nArguments\n\ngrid:       Grid{dim}: The macro scale grid,\nrvesetup:   RVESetup{dim}: The object containing setups for solving rve problem,\nΔt:         The time step size,\nt-total:    the total computational time.\n\nImplementation Details\n\nInitialize the solution storage. Do time stepping with updating the boundary condition.\n\nThe updated boundary condition is then applied to the global stiffness matrix and force vector as well as the solution vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.animate_macro_result","page":"Macro scale","title":"YiyuanStudentProject.animate_macro_result","text":"animate_macro_result(res::NamedTuple, setup::RVESetup{dim}, file_name::String=\"Myresult.mp4\", n::Number)\n\nReturn an animation showing the evolution of the solution for a macro scale simulation.\n\nArguments:\n\nres:         A NamedTuple containing the simulation results\nsetup:       The setup object for the RVE simulation, containing: grid and dh fields\nfile_name:   The path and name of the output animation file (default: \"Myresult.mp4\")\n\nImplementation Details:\n\nInitialize a Makie figure with a size of (1200, 800).\n\nGenerate observables for t and a using _prepare_plots!.\n\nRecord frames by iterating over the indices of t and updates the observables accordingly.\n\nSave the animation as an MP4 file.\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject._prepare_plots!","page":"Macro scale","title":"YiyuanStudentProject._prepare_plots!","text":"prepareplots!(pos, res::NamedTuple, setup::RVESetup{dim};                      scale::Real=1.0,                      titlestart::String=\"RVE response\") where {dim}\n\nSets up the necessary plots and observables `tᵒᵇˢ` and `aᵒᵇˢ` for visualizing macroscale simulation results: deformation, chemical potential, concentration.\n\nArguments:\n\npos:    A layout position,\nres:    A NamedTuple containing:\nt:      Time at each time step,\na:      Result vector corresponding to the time.\nsetup: An object SolveSetupwith the grid and degrees of freedom configuration.\n\nImplementation Details:\n\nGenerate the mesh representation both undeformed and deformed grid.\n\nDetermine the boundary values of chemical potential μ and concentration c across the grid nodes for all time steps.\n\nAdd sliced opening to show the internal strucature with particles and matrix with distinguished colors.\n\nCreate observables for time tᵒᵇˢ and data aᵒᵇˢ.\n\nPrepare subplots for:     Undeformed grid with a static wireframe.     Deformed grid based on the scaled displacement field u.     Chemical potential and concentration using a color-mapped mesh and color bar.\n\n\n\n\n\n_prepare_plots!(pos, res::NamedTuple, setup::SolveSetup{dim}; \n                scale::Real=1.0, \n                titlestart::String=\"macroscale solution\") where {dim}\n\nSets up the necessary plots and observables `tᵒᵇˢ` and `aᵒᵇˢ` for visualizing macroscale simulation results: deformation, chemical potential.\n\nArguments:\n\npos:    A layout position,\nres:    A NamedTuple containing:\nt:      Time at each time step,\na:      Result vector corresponding to the time.\nsetup: An object SolveSetupwith the grid and degrees of freedom configuration.\n\nImplementation Details:\n\nGenerate the mesh representation both undeformed and deformed grid.\n\nDetermine the boundary values of chemical potential μ across the grid nodes for all time steps.\n\nCreate observables for time tᵒᵇˢ and data aᵒᵇˢ.\n\nPrepare subplots for:     Undeformed grid with a static wireframe.     Deformed grid based on the scaled displacement field u.     Chemical potential using a color-mapped mesh and color bar.\n\n\n\n\n\n","category":"function"},{"location":"reference/macro_scale/#YiyuanStudentProject.animate_combined_result","page":"Macro scale","title":"YiyuanStudentProject.animate_combined_result","text":"animate_macro_result(res::NamedTuple, setup::SolveSetup{dim}; file_name=\"Myresult.mp4\", kwargs...) where {dim}\n\nGenerates an MP4 animation of a time dependent macro-scale results using Makie.jl. \n\nArguments:\n\nres:    A NamedTuple with the following fields:\nt:      Time at each time step,\na:      Result vector corresponding to the time.\nsetup:  An SolveSetup that contains the problem configuration.\n\nImplementation Details:\n\nInitialize a Makie figure with a size of (1200, 800).\n\nGenerate observables for t and a as well as the NamedTuple observables rve using _prepare_plots!.\n\nRecord frames by iterating over the indices of t and updates the observables accordingly.\n\nSave the animation as an MP4 file.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Documentation","page":"Documentation overview","title":"Documentation","text":"","category":"section"},{"location":"documentation/","page":"Documentation overview","title":"Documentation overview","text":"Pages = [\n    \"fine_scale.md\",\n    \"upscaling.md\",\n    \"macro_scale.md\",\n]","category":"page"},{"location":"documentation/fine_scale/#documentation-fine-scale","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"","category":"section"},{"location":"documentation/fine_scale/#Strong-From","page":"Chemo-Mechanical Problem - fine scale","title":"Strong From","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Three primary variable fields: displacement vector boldsymbol u(xt) Omega times mathbbR^+ rightarrow mathbbR^3 ,molar ion concentration boldsymbol c(xt) Omega times mathbbR^+ rightarrow mathbbR as well as the chemical potential gradient boldsymbol mu(xt) Omega times mathbbR^+ rightarrow mathbbR are solved in the lithium structural battery problem. To define the problem the balance of linear momentum and the balance of mass are given in Strong Forms as following:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n-boldsymbolsigma cdot boldsymbolnabla = 0\n\nin  Omega times (0T\n\ndotboldsymbol c + boldsymbol j cdot boldsymbolnabla = 0\n\nin  Omega times (0T\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Where the boundary is divied into three parts for the three variable fields respectively (\\Gamma = \\GammaD^{(u)} \\cup \\GammaN^{(u)} = \\GammaD^{(\\mu)} \\cup \\GammaN^{(\\mu)} $):","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol u = boldsymbol u^textp\n\non  Gamma_D^(u) times (0T\n\nboldsymbol t = boldsymbol sigma cdot boldsymbol n = boldsymbol t^textp\n\non  Gamma_N^(u) times (0T\n\nboldsymbol mu = boldsymbol mu^textp\n\non  Gamma_D^(mu) times (0T\n\nboldsymbol h = -boldsymbol j cdot boldsymbol n = boldsymbol h^textp\n\non  Gamma_N^(mu) times (0T\nendalign","category":"page"},{"location":"documentation/fine_scale/#Constitutive-Models","page":"Chemo-Mechanical Problem - fine scale","title":"Constitutive Models","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Due to the coupling of the mechanical and chemical aspects the total strain has both the contribution due to a deformation state boldsymbol u(xt) and the ion concentration boldsymbol c(xt), where an ion intercalation tensor boldsymbol alpha^ch = boldsymbol alpha boldsymbol I is used based on the models of Zhang, Shyy and Sastry and Bohn et al.","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol varepsilonboldsymbol u = (boldsymbol u otimes boldsymbol nabla)^textsym\n\nboldsymbol varepsilon^textch(c) = boldsymbol alpha^textch (boldsymbol c-boldsymbol c_textref)\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"The free energy psi is assumed to be the sum of mechanical and chemical parts boldsymbol psi (boldsymbol varepsilon boldsymbol c) = boldsymbol psi^textmech(boldsymbol varepsilonboldsymbol c) + boldsymbol psi^textchem(boldsymbol c).","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol psi^textmech = frac12(boldsymbol varepsilon-boldsymbol varepsilon^textch(boldsymbol c)) colon boldsymbol E colon (boldsymbol varepsilon-boldsymbol varepsilon^textch(boldsymbol c))\n\nboldsymbol psi^textchem = (boldsymbol c-boldsymbol c_textref)boldsymbol mu_textref + frac12 fracboldsymbol R boldsymbol theta_textrefboldsymbol c_text m(boldsymbol c-boldsymbol c_textref)^2\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"Furthermore, a constant mobility tensor boldsymbol M for the assumption of a linear relation between ion flux and the gradient of the chemical potential is defined using a mobility coefficient boldsymbol eta for the isotropic case such as in this project. A reference temperature boldsymbol theta_textref and the concentration boldsymbol c_textref as well as the reference chemical potential boldsymbol mu_textref are gloable constant material parameters for the purpose of linearization.  So that the simplified constitutive equations are:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\n    boldsymbol sigma(boldsymbol varepsilonboldsymbol c) = fracpartial boldsymbolpsipartial boldsymbolvarepsilon = boldsymbol E colon (boldsymbol varepsilon-boldsymbol varepsilon^textch(boldsymbol c))\n\n    boldsymbol mu(boldsymbol varepsilonboldsymbol c) = boldsymbol mu^texten(boldsymbol varepsilonboldsymbol c) = fracpartial boldsymbol psipartial boldsymbol varepsilon = boldsymbol mu_textref + fracboldsymbol R boldsymbol theta_textrefboldsymbol c_m(boldsymbol c-boldsymbol c_textref) - boldsymbol alpha^textch colon boldsymbol sigma(boldsymbol varepsilonboldsymbol c)\n\n    boldsymbol j(boldsymbol nablaboldsymbol mu) = -boldsymbol M cdot boldsymbol nablaboldsymbol mu\nendalign","category":"page"},{"location":"documentation/fine_scale/#Weak-Format","page":"Chemo-Mechanical Problem - fine scale","title":"Weak Format","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nint_Omega boldsymbol sigma (boldsymbol varepsilonboldsymbol uboldsymbol c)  boldsymbol varepsilondelta boldsymbol u  dOmega  =  int_Gamma_N^(u) boldsymbol t^textp cdot delta boldsymbol u  dGamma\n\nforall delta boldsymbol u in mathbbU^0\n\nint_Omega dotboldsymbol c  delta boldsymbol mu  dOmega - int_Omega boldsymbol j(boldsymbol nablaboldsymbol mu) cdot boldsymbol nabladelta boldsymbol mu  dOmega\n=  int_Gamma_N^(mu) boldsymbol h^textp delta boldsymbol mu  dGamma\n\nforall delta boldsymbol mu in mathbbM^0\n\nint_Omega (boldsymbol mu - boldsymbol mu^texten(boldsymbol varepsilonu boldsymbol c)) delta boldsymbol c  dOmega\n= 0\n\nforall delta boldsymbol c in mathbbC^0\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"where the initial state of all unknown fields for all elements in Omega are choosen based on the consistent reference state as mentioned earlier boldsymbol c_0 = boldsymbol c_textref boldsymbol mu_0 = boldsymbol mu_textref boldsymbol u_0 = 0.","category":"page"},{"location":"documentation/fine_scale/#Time-Stepping","page":"Chemo-Mechanical Problem - fine scale","title":"Time Stepping","text":"","category":"section"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"As the transit problem is discussed here, one of the crucial part is to solve the time derivative term int_Omega dotboldsymbol c  delta boldsymbol mu  dOmega in the FE context. Due to the linearity of the problem a direct derivation of the element stiffness boldsymbol K_e, the mass matrix boldsymbol M_e, and the right hand side vector  boldsymbol f_e is possible. The constraint matrix boldsymbol C_e for langle boldsymbol murangle _square = barboldsymbol mu is merged into the last row and colum of boldsymbol K_e. ","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"The whole PDE system can be discretized using the Crank-Nicolson scheme, where boldsymbol a is the global result vector including all unknown fields:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol a(t^textn+1) approx boldsymbol a(t^textn) + frac12 Delta t (dot boldsymbol a (t^n) + dot boldsymbol a(t^n+1))\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"so that the linear system can be discretized as following:","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol M dotboldsymbol a + boldsymbol K boldsymbol a^textn = boldsymbol f\n\ndotboldsymbol a = boldsymbol M^-1boldsymbol f - boldsymbol K boldsymbol a^textn\n\nboldsymbol a^text n+1 = boldsymbol a^text n + frac12 Delta t (dot boldsymbol a ^text n + dot boldsymbol a^text n+1)\n\nboldsymbol a^text n+1 = boldsymbol a^text n + frac12 Delta t (boldsymbol M^-1(2 boldsymbol f  - boldsymbol K (boldsymbol a^textn + boldsymbol a^textn+1)) )\n\nboldsymbol M boldsymbol a^text n+1 + frac12 Delta t boldsymbol K boldsymbol a^textn+1 = boldsymbol M boldsymbol a^text n + frac12 Delta t (-boldsymbol K boldsymbol a^textn + 2boldsymbol f)\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"In order to solve for boldsymbol a^textn+1 the jacobian matrix boldsymbol J and the residual vector boldsymbol g are computed using the gloable stiffness matrix boldsymbol K and mass matrix boldsymbol M as well as boldsymbol a^textn for boldsymbol g.","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"beginalign\nboldsymbol J = boldsymbol M + frac12Delta t boldsymbol K\n\nboldsymbol g = (boldsymbol M -frac12Delta t boldsymbol K )boldsymbol a^textn + Delta t boldsymbol f\nendalign","category":"page"},{"location":"documentation/fine_scale/","page":"Chemo-Mechanical Problem - fine scale","title":"Chemo-Mechanical Problem - fine scale","text":"where the initial state of all unknown fields for all elements in Omega are choosen as c_0 = c_ref mu_0 = mu_ref u_0 = 0.","category":"page"},{"location":"reference/#Reference","page":"Reference overview","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference overview","title":"Reference overview","text":"Pages = [\n    \"types.md\",\n    \"fine_scale.md\",\n    \"upscaling.md\",\n    \"macro_scale.md\",\n]","category":"page"},{"location":"reference/fine_scale/","page":"Fine scale","title":"Fine scale","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/fine_scale/#Fine-scale","page":"Fine scale","title":"Fine scale","text":"","category":"section"},{"location":"reference/fine_scale/","page":"Fine scale","title":"Fine scale","text":"generate_rve_grid\nprepare_setup\nadd_bc!\nassemble_K_M_f!\nassemble_element!\ncompute_time_step!\nsolve_time_series\nplot_grid\nanimate_result","category":"page"},{"location":"reference/fine_scale/#YiyuanStudentProject.generate_rve_grid","page":"Fine scale","title":"YiyuanStudentProject.generate_rve_grid","text":"generate_rve_grid(; ϕ::Real, d::Real, meshsize::Real, dx::NTuple{3,Real}=(1.0,1.0,1.0))\ngenerate_rve_grid(spheres::Vector{BubbleBath.Sphere{3}}; meshsize::Real, dx::NTuple{3,Real}=(1.0,1.0,1.0))\n\nReturn a Grid with spherical inclusions for a 3D RVE in desired meshsize.  Two cell sets are included in the generated grid:\n\n\"particles\":    Cells within the spherical inclusions.\n\"matrix\":       Cells outside the spheres (background material).\n\nVariation 1\n\nThe grid will be generated by giving the volume fraction of the spherical inclusions ϕ (0 ≤ ϕ ≤ 1), the average diameter of the spheres d, and the meshsize as well as the RVE size dx  in 3D, which by default is (1.0, 1.0, 1.0).\n\nVariation 2\n\nIn this variation a vector of pre-defined spheres to be embedded in the grid sphere is given instead of  the volume fraction and the average diameter of the sphere. The meshsize and the RVE size dx  are still needed arguments in this case.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.prepare_setup","page":"Fine scale","title":"YiyuanStudentProject.prepare_setup","text":"prepare_setup(rve::RVE{dim}) where {dim}\n\nReturn a RVESetup struct for the element-wise assembly and time stepping. \n\nArguments:\n\n-rve:\tRVE\n\nImplementation Details:\n\nThe interpolation ip is defined by passing the corresponding refshape using the function _get_ref_shape(Val(dim)). \n\nAfter the 'DofHandler' is created based on the grid from the argument rve, unknown fields can be added to it using add! By calling close! to finalize the construction. \n\nCellvallues are created for each discrete fields respectively passing quadrature rule with 3 integration points.\n\nNumber of base function for each unknown fields is defined using getnbasefunctions.\n\nCalling function add_bc! to initialize the boundary conditions and associate this to the Dofhandler.\n\nLocal stiffness and mass matrices are initialized. subarrays for locating the corresponding field interaction in element-wise by calling the macro @view.\n\nA NamedTuple with the PhaseSetups is then prepared for particles P and  matrix M.\n\nGlobal stiffness, mass, and system matrices is initialized using allocate_matrix for a sparse matrix pattern.\n\nInitialize the gloable system vector and the solution vectors for both current and next time step.\n\nGet the total volume of the RVE.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.add_bc!","page":"Fine scale","title":"YiyuanStudentProject.add_bc!","text":"add_bc!(ch::ConstraintHandler, grid::Grid{3}, load::LoadCase{3})\n\nAdd a dirichlet boundary condition for the unknown fields respectively on the ∂Ω part of the boundary. ∂Ω is defined by the collection of periodic facets from the grid. \n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.assemble_K_M_f!","page":"Fine scale","title":"YiyuanStudentProject.assemble_K_M_f!","text":"    assemble_K_M_f!(setup::RVESetup)\n\nReturn the assembled mass matrix M and stiffness matrix K.\n\nArguments:\n\nsetup:   A preconfigured object that defined for RVE assembly. Fields from setup are used in this function:\nphasesetups: A preconfigured object type that defined for elementweise assembly,\nM:           Initialized global mass matrix to be assembled,\nK:           Initialized global stiffness matrix to be assembled,\nf:           Initialized global right hand side vector to be assembled.\n\nImplementation Details:\n\nCreate a CSCAssembler for both K, f, and M.\n\nDo the whole assembly for all the phases:     for all cells update the cell values for all the unknown fields and fill zeros to the      do element assembly,     return assembled Kₑ, Mₑ and fₑ.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.assemble_element!","page":"Fine scale","title":"YiyuanStudentProject.assemble_element!","text":"    assemble_element!(setup::PhaseSetup)\n\nReturn the assembled mass matrix for coupling between the chemical potantial and the concentration fields as well as the stiffness matrix.\n\nArguments:\n\nsetup:  a preconfigured object type that defined for elementweise assembly. \n\nImplementation Details:\n\nFor each quadrature point the element volume is computed. Furthermore for each base function in corresponding field, evaluate the shape function for the test function. The nodal value of a certain unknown field is then computed for each base funtion in that field.\n\nThen the coupling subarrays are computed as:\n\nKₑuu = ∫(δNϵi ⊡ E ⊡ Nϵj) * dΩ\n\nKₑuc = ∫-(δNϵi ⊡ E ⊡ (αᶜʰ*(Ncj - cʳᵉᶠ))) * dΩ\n\nKₑcu = ∫(δNci * (αᶜʰ ⊡ E ⊡ Nϵj))* dΩ\n\nKₑcc = ∫-(δNci * (k(Ncj-cʳᵉᶠ) + αᶜʰ ⊡ E ⊡(αᶜʰ(Ncj - cʳᵉᶠ))))* dΩ\n\nKₑcμ = ∫(δNci * (Nμj - μʳᵉᶠ)) * dΩ\n\nKₑμμ = ∫(δN∇μi ⋅ M ⋅ N∇μj) * dΩ\n\nMₑμc = ∫(Ncj * δNμi) * dΩ\n\nwhere:\n\nNxj:     Shape function of field x \nδNxi:    Shape function for x field test function\nN∇xj:    Gradient of shape function of field x \nδN∇xi:   Gradient of shape function for test function of field x\ndΩ:      Determinant of the Jacobian times the quadrature weight\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.compute_time_step!","page":"Fine scale","title":"YiyuanStudentProject.compute_time_step!","text":"compute_time_step!(setup::RVESetup{dim}, load::LoadCase{dim}, Δt)\n\nCompute the solution for the next time step in a Representative Volume Element (RVE) simulation using an implicit time integration scheme.\n\nArguments\n\nsetup:   RVESetup{dim}: The setup object containing parameters for the RVE simulation\nload:    LoadCase{dim}: The load case specifying boundary conditions and external loads for the current time step.\nΔt:      The time step size.\n\nImplementation Details\n\nThis function uses Crank-Nicolson Method to compute the solution in an implicit time stepping scheme for solving  the linear system in the next time step:\n\nThe function applies boundary conditions to the system matrix and force vector using a constraint handler before solving  for the next time step solutions.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.solve_time_series","page":"Fine scale","title":"YiyuanStudentProject.solve_time_series","text":"solve_time_series(rve::RVE{dim}, load::LoadCase{dim};  Δt=0.25, t_total=1) where {dim}\n\nFor visualizing the fine scale problem results. Compute the results in a NamedTuple with fields t total time and a solution vector series contain u displacement, μ chemical potantial,  and c concentration for the whole time series with a certain time step width. \n\nArguments\n\nrve:    Object for solving function prepare_setup,\nload:   Object LoadCase.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.plot_grid","page":"Fine scale","title":"YiyuanStudentProject.plot_grid","text":"plot_grid(grid::Grid{3})\n\nRuturn a Makie.Figure to visualize a 3D finite element grid using the Makie plotting library.\n\nArguments:\n\ngrid::Grid{3}: A 3D grid object representing the finite element mesh to be visualized. \n\nImplementation Details:\n\nA plotable mesh is generated using _prepare_plotable_mesh and input grid\n\nSets up a 3D axis Axis3 with an equal aspect ratio and a title undeformed grid.\n\nRenders the grid as a solid mesh Makie.mesh! with a light blue color.\n\nOverlays the grid's edges as a wireframe Makie.wireframe! with black edges.\n\n\n\n\n\n","category":"function"},{"location":"reference/fine_scale/#YiyuanStudentProject.animate_result","page":"Fine scale","title":"YiyuanStudentProject.animate_result","text":"animate_result(res::NamedTuple, setup::RVESetup{dim}, file_name::String=\"Myresult.mp4\", n::Number)\n\nReturn an animation showing the evolution of the solution for a 3D RVE simulation.\n\nArguments:\n\nres:         A NamedTuple containing the simulation results\nsetup:       The setup object for the RVE simulation, containing: grid and dh fields\nfile_name:   The path and name of the output animation file (default: \"Myresult.mp4\")\n\nImplementation Details:\n\nInitialize a Makie figure with a size of (1200, 800).\n\nGenerate observables for t and a using _prepare_plots!.\n\nRecord frames by iterating over the indices of t and updates the observables accordingly.\n\nSave the animation as an MP4 file.\n\n\n\n\n\n","category":"function"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"EditURL = \"../literate-examples/example_1.jl\"","category":"page"},{"location":"examples/example_1/#example-1","page":"Example","title":"Example 1","text":"","category":"section"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"In this example, we solve the transit linear chemo-mechanical problem in FE² framework that is discussed the documentation in a domain with particles (Omega^textP) embedded in matrix (Omega^textM).","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"The full program, without comments, can be found in the next section.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"using YiyuanStudentProject","category":"page"},{"location":"examples/example_1/#Fine-scale","page":"Example","title":"Fine scale","text":"","category":"section"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Setting up the dimension, material parameters, loadcase originated from macro scale for solving a 3D RVE problem. The material parameters are characterized using simple values for the particle P and Matrix M. Parameters like the average particle diameter d, the particle volume fraction ϕ, and the meshsize are given followed.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"dim = 3\n\nP = Material{dim}(; G=4.0e5, K=6.67e5, η=1.0, cʳᵉᶠ=1.0, μʳᵉᶠ=1.0, θʳᵉᶠ=1.0, cᵐ=1.0, α=0.0001)\nM = Material{dim}(; G=4.0e5, K=6.67e5, η=1.0, cʳᵉᶠ=1.0, μʳᵉᶠ=1.0, θʳᵉᶠ=1.0, cᵐ=1.0, α=0.0001)\nload = LoadCase(dim; ε̄₁₁ = 0.25, μ̄ = 1.0, ζ̄₁=1.0)\nd = 0.1\nϕ = 0.1\nmeshsize = 0.1","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Generate a grid with spherical inclusions for a 3D Representative Volume Element (RVE) in desired meshsize as well as one symplified grid for macro scale presentation. Material phases like partical and matrix are included as cell sets in the rve grid.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"grid = generate_rve_grid(; ϕ=ϕ, d=d, meshsize=meshsize, dx=(1.0,1.0, 1.0))\ngrid_macro = generate_grid(Tetrahedron, (1,1,1) , Vec{3, Float64}((-5,-5,-5)), Vec{3, Float64}((5,5,5)))","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Construct an object as setup for solving the RVE problem.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"rve = RVE(grid, P, M)\nsetup_rve = prepare_setup(rve)","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Perform the assembly for constructing the system matrices K, M, and right hand side vector f.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"assemble_K_M_f!(setup_rve)","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Solve the time dependent problem macro scale problem.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"res, res_rve, setup = solve_macro_problem(grid_macro, setup_rve,  Δt=1e-4, t_total=1e-3)","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"a visualization of results from both fine scale and macro scale problem can use animate_combined_result","category":"page"},{"location":"examples/example_1/#example_1-plain-program","page":"Example","title":"Plain program","text":"","category":"section"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"Here follows a version of the program without any comments. The file is also available here: example_1.jl.","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"using YiyuanStudentProject\n\ndim = 3\n\nP = Material{dim}(; G=4.0e5, K=6.67e5, η=1.0, cʳᵉᶠ=1.0, μʳᵉᶠ=1.0, θʳᵉᶠ=1.0, cᵐ=1.0, α=0.0001)\nM = Material{dim}(; G=4.0e5, K=6.67e5, η=1.0, cʳᵉᶠ=1.0, μʳᵉᶠ=1.0, θʳᵉᶠ=1.0, cᵐ=1.0, α=0.0001)\nload = LoadCase(dim; ε̄₁₁ = 0.25, μ̄ = 1.0, ζ̄₁=1.0)\nd = 0.1\nϕ = 0.1\nmeshsize = 0.1\n\ngrid = generate_rve_grid(; ϕ=ϕ, d=d, meshsize=meshsize, dx=(1.0,1.0, 1.0))\ngrid_macro = generate_grid(Tetrahedron, (1,1,1) , Vec{3, Float64}((-5,-5,-5)), Vec{3, Float64}((5,5,5)))\n\nrve = RVE(grid, P, M)\nsetup_rve = prepare_setup(rve)\n\nassemble_K_M_f!(setup_rve)\n\nres, res_rve, setup = solve_macro_problem(grid_macro, setup_rve,  Δt=1e-4, t_total=1e-3)","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"","category":"page"},{"location":"examples/example_1/","page":"Example","title":"Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"documentation/upscaling/#documentation-upscaling","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"","category":"section"},{"location":"documentation/upscaling/#Running-Averaging-on-RVE","page":"Chemo-Mechanical Problem - upscaling","title":"Running Averaging on RVE","text":"","category":"section"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"The homogenization of macro scale problem is introduced by using the running averages on RVE. This approach for a diamond quantity is denoted for volume and surface as following respectively:","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"beginalign\nlang diamond rang _square = frac1boldsymbol Omega _square int_boldsymbol Omega _square diamond  d boldsymbol Omega\n\n\nlang lang diamond rang rang _square = frac1boldsymbol Gamma _square int_boldsymbol Gamma _square diamond  d boldsymbol Gamma\nendalign","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"where the corresponding homogenized macro scale field bar diamond is thus defined as bar diamond = lang diamond rang _square . This approach allows the fine(sub) scale quantities upscale into the macro scale.","category":"page"},{"location":"documentation/upscaling/#Hierarchical-Decomposition","page":"Chemo-Mechanical Problem - upscaling","title":"Hierarchical Decomposition","text":"","category":"section"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"For the chemo-mechanical problem, unknown fields displacement boldsymbol u and chemical potential boldsymbol mu can be decomposed into (smooth) macro-scale diamond ^M and (fluctuating) sub-scale diamond ^s, where the macro-scale parts will be prescribed using Taylor expensions in each RVE. Since the sub-scale unknown field concentration boldsymbol c will not be considered in macro scale problem due to its localization, no such decomposition is needed for it.","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"Thus, using first order Taylor expension(linear variation) the homogenized fields barboldsymbol u and barboldsymbol mu are defined as follows:","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"beginalign\nboldsymbol u^Mbarboldsymbol u(barboldsymbol x boldsymbol x ) = barboldsymbol u(barboldsymbol x) + barboldsymbol xi(barboldsymbol x) cdot x - barboldsymbol x   barboldsymbol xi = barboldsymbol u  otimes boldsymbol nabla   x in boldsymbol Omega_square\n\n\n\nboldsymbol mu^Mbarboldsymbol mu(barboldsymbol x boldsymbol x ) = barboldsymbol mu(barboldsymbol x) + barboldsymbol zeta(barboldsymbol x) cdot x - barboldsymbol x   barboldsymbol zeta = boldsymbol nabla barboldsymbol mu     x in boldsymbol Omega_square\nendalign","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"where barboldsymbol x is centriod and also holds to the upscaling rules mentioned earlier.","category":"page"},{"location":"documentation/upscaling/#Upscaling","page":"Chemo-Mechanical Problem - upscaling","title":"Upscaling","text":"","category":"section"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"After inserting the hierarchical decomposition boldsymbol u = boldsymbol u ^M + boldsymbol u ^s in mathbb U ^M oplus mathbb U ^s and boldsymbol mu = boldsymbol mu ^M + boldsymbol mu ^s in mathbb M ^M oplus mathbb M ^s and the upsacling assumption bar diamond = lang diamond rang _square into the fine scale week form:","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"beginalign\nint_Omega lang boldsymbol sigma (boldsymbol varepsilonboldsymbol u ^Mbar boldsymbol u + boldsymbol u ^sboldsymbol c ^s)  boldsymbol varepsilonboldsymbol u ^M delta bar boldsymbol u + deltaboldsymbol u ^s rang _square  dOmega  =  int_Gamma_N^(u) boldsymbol t^textp cdot delta barboldsymbol u  dGamma\n\nforall delta (barboldsymbol u boldsymbol u ^s) in bar mathbbU^0 oplus mathbb U ^s\n\nint_Omega lang dotboldsymbol c ^s  mu ^M delta barboldsymbol mu + deltamu^s rang _square  dOmega - int_Omega boldsymbol lang j(boldsymbol nablamu ^M barboldsymbol mu + mu^s) cdot boldsymbol nablamu ^M delta barboldsymbol mu + deltamu^s rang _square  dOmega\n=  int_Gamma_N^(mu) boldsymbol h^textp delta barboldsymbol mu  dGamma\n\nforall delta (barboldsymbol mu boldsymbol mu ^s) in bar mathbbM^0 oplus mathbb M ^s\n\nint_Omega lang (mu ^M barboldsymbol mu + mu^s - boldsymbol mu^texten(boldsymbol varepsilonboldsymbol u ^Mbar boldsymbol u + boldsymbol u ^s boldsymbol c^s)) delta boldsymbol c^s rang _square  dOmega\n= 0\n\nforall delta boldsymbol c^s in mathbbC^0\nendalign","category":"page"},{"location":"documentation/upscaling/","page":"Chemo-Mechanical Problem - upscaling","title":"Chemo-Mechanical Problem - upscaling","text":"so that with setting delta boldsymbol u^s delta boldsymbol mu^s delta boldsymbol mu^s to 0, the globally coupled macro scale problem is defined.","category":"page"},{"location":"reference/types/","page":"Types","title":"Types","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"reference/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"reference/types/","page":"Types","title":"Types","text":"Material\nRVE\nLoadCase\nPhaseSetup\nRVESetup\nGaussPointData\nAssemblySetup\nSolveSetup","category":"page"},{"location":"reference/types/#YiyuanStudentProject.Material","page":"Types","title":"YiyuanStudentProject.Material","text":"Material{dim,T}\n\nA Material characterize the constitutive behavior with:\n\nE:          fourth order stiffness tensor E,\nαᶜʰ:        second order ion intercalation tensor,\nk:          concentration-chemical potential coefficient,\ncʳᵉᶠ:       reference concentration,\nM:          second order mobility tensor,\nμʳᵉᶠ        reference chemical potantial.\n\nA Material with isotropic properties can be created by calling the funtion Material{dim}(; G::T, K::T, η::T, cʳᵉᶠ::T, μʳᵉᶠ::T, θʳᵉᶠ::T, cᵐ::T, α::T, R::T=8.31446261815324) where {dim, T<:Real}\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.RVE","page":"Types","title":"YiyuanStudentProject.RVE","text":"[RVE{dim}](@ref)\n\nA RVE is defined by a geometry and material characteristic of constituents that contains\n\ngrid:       a Grid for the prescribed RVE,\nP:          Material type for partical constraints,\nM:          Material type for matrix.\n\nThe type can be created by calling the funtion RVE(; grid::Grid{dim}, materials::NamedTuple{(:P,:M),Tuple{Material{dim}, Material{dim}}}) where {dim}\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.LoadCase","page":"Types","title":"YiyuanStudentProject.LoadCase","text":"LoadCase{dim}\n\nA LoadCase defines the macro scale quantities imposed on RVE as loading\n\nε̄:          averaging external strain tensor,\nμ̄:          averaging chemical potantial on the boundary,\nζ̄          gradient of the averaging chemical potantial on the boundary.\n\nTo create a LoadCase by defining only the non-zero tensor components the constructor LoadCase(dim::Int; kwargs...) can be used.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.PhaseSetup","page":"Types","title":"YiyuanStudentProject.PhaseSetup","text":"PhaseSetup{dim}\n\nA PhaseSetup contains the relevant imformation for the element assembly:\n\ndh:             DofHandler based on the given grid,\ncells:          ordered cell set defining the phase domain,\ncv:             CellValues in NamedTuple for each unknown field,\nnbf:            number of base function in NamedTuple for the unknown fields,\nmaterial:       Material of the phase,\nKₑ:             element stiffness matrix,\nMₑ:             element mass matrix,\nfₑ:             element right hand side vector,\nsubarrays:      subarrays blocks associated with the unknown fields for element matrix assembly.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.RVESetup","page":"Types","title":"YiyuanStudentProject.RVESetup","text":"RVESetup{dim}\n\nA RVESetup contains the relevant imformation for the solving the transient problem:\n\ngrid:           a Grid defining the RVE geometry,\ndh:             DofHandler based on the given grid,\nphasesetups:    PhaseSetup in NamedTuple for each unknown field,\nK:              stiffness matrix,\nM:              mass matrix,\nf:              right hand side vector,\nJ:              system matrix for time stepping,\ng:              system vector for time stepping,\naⁿ:             unknowns at current time,\naⁿ⁺¹:           unknowns after performing a time,\nVʳᵛᵉ:           Volume of the RVE.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.GaussPointData","page":"Types","title":"YiyuanStudentProject.GaussPointData","text":"GaussPointData{dim}\n\nA mutable GaussPointData that prescribes and collects relevent datas from the corresponding RVE problem for each gauss point in macro scale problem:\n\naᵣᵥₑⁿ:           the result vector from every rve problem, \nc̄ⁿ:              the average concentration (only flactuation) at current time step,\nc̄₂ⁿ:              the average gradient of concentration (only flactuation) at current time step.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.AssemblySetup","page":"Types","title":"YiyuanStudentProject.AssemblySetup","text":"AssemblySetup{dim}\n\nAn AssemblySetup contains the relevant imformation for the element assembly in macro scale problem:\n\ndh:             DofHandler based on the given grid,\ncv:             CellValues in NamedTuple for each unknown field,\nnbf:            number of base function in NamedTuple for the unknown fields,\nKₑ:             element stiffness matrix,\naₑ:             element unknowns vector,\nsubarrays:      subarrays blocks associated with the unknown fields for element matrix assembly,\ngpdata:         GaussPointData at corresponding cell and gauss point,\nrvesetup:       RVESetup for evaluating fine scale rve problem at each gauss point.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#YiyuanStudentProject.SolveSetup","page":"Types","title":"YiyuanStudentProject.SolveSetup","text":"SolveSetup{dim}\n\nA SolveSetup contains the relevant imformation for the solving the transient macro scale problem:\n\ngrid:           a Grid defining the RVE geometry,\ndh:             DofHandler based on the given grid,\nch:             ConstraintHandler for updating the boundary condition at each time step,\nassemblysetup:  AssemblySetup for element assembly,\nK:              stiffness matrix,\nf:              right hand side vector,\naⁿ:             unknowns at current time.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = YiyuanStudentProject","category":"page"},{"location":"#Chemo-mechanical-Problem","page":"Home","title":"Chemo-mechanical Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for YiyuanStudentProject.jl ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The aim of this project is to develop and implement a linear transient chemo-mechanical multi-scale model within the FE² framework. To expedite the computation for a substantial number of Representative Volume Element (RVE) problems, the preparation for employing Numerical Model Reduction (NMR) utilizing snapshot Proper Orthogonal Decomposition (POD) shall be undertaken.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As indicated by the name, a chemo-mechanical problem refers to the situation where chemical reactions and mechanical changing are coupled together. Such problems are common in various fields, including battery science. Thus, a lithium-ion structural battery problem is discussed in this project, where the deformation and ion concentration have an influence of the chemical potential change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This document provides an examination of the mathematical model and comprehensive explanation of the code implementation with an example.","category":"page"}]
}
